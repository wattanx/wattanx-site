[
  {
    "title": "JestとVitestのisolateについて",
    "contentSnippet": "はじめに!Vitest のバージョンは 0.31.0時点での話です。現状 Vitest が Jest など他のテスティングフレームワークに比べて遅くなる場合があることがわかっています。(確実に遅くなるとはいえない。が、私自身もテストの速度が遅くなったことを経験しています。)https://github.com/vitest-dev/vitest/issues/579!vitest runで実行した場合の話であり、watchモードは高速です。また Vitest を実行する場合、--single-threadオプションをつけると速くなるということもわかっています。(...",
    "link": "https://zenn.dev/wattanx/articles/jest-vitest-isolate",
    "isoDate": "2023-02-23T05:59:26.000Z",
    "dateMiliSeconds": 1677131966000
  },
  {
    "title": "microCMS SDKのC#版を作成した",
    "contentSnippet": "はじめにこの記事はmicroCMS Advent Calender 2021 8 日目の記事ですmicroCMS 様が公式に出している SDK には私もお世話になっています。https://github.com/microcmsio/microcms-js-sdk様々な言語の SDK が用意されていますが、C#はまだ提供されていないようです。C#でも microCMS を用いたアプリケーションの開発がスムーズにできるように、上記の microCMS SDK を参考にしながら C#版の microCMS SDK を作成しました。https://github.com/watt...",
    "link": "https://zenn.dev/wattanx/articles/microcms-sdk-csharp",
    "isoDate": "2021-12-06T23:25:03.000Z",
    "dateMiliSeconds": 1638833103000
  },
  {
    "title": "React用の簡単なバリデーションライブラリを作りました",
    "contentSnippet": "はじめにReact を用いた Web アプリケーション開発において、Form のバリデーションをどうするかという問題に遭遇しました。React Hook FormやFormikなどいろんなライブラリを比較・検討してきましたが、そこまで大きな機能は必要なく簡単なバリデーションができればいいという考えからライブラリを自作しました。https://github.com/wattanx/react-svl 欲しかった機能バリデーションライブラリの機能として欲しかったのはバリデーションのルールを指定できるControlled Components を利用する必須チェック、...",
    "link": "https://zenn.dev/wattanx/articles/20210927_react-svl",
    "isoDate": "2021-10-05T13:12:07.000Z",
    "dateMiliSeconds": 1633439527000
  },
  {
    "title": "lint-staged × ESLintの--max-warnings=0をつけてコミットできなくなったときの対処法",
    "contentSnippet": "はじめにhusky と lint-staged を使ってコミット前に ESLint を走らせるようにした。しかし、ESLint のオプション--max-warnings=0がついているかつステージングのファイルが.eslintignoreに含まれている場合にコミットできなくなったので、対処法をメモ。 前提条件ESLint, husky, lint-staged の設定済みESLint: v7.30.0lint-staged: v11.1.2husky: 7.0.2package.json\"scripts\": {  ...,  \"prepare\": \"hus...",
    "link": "https://zenn.dev/wattanx/articles/lint-staged-eslint-max",
    "isoDate": "2021-09-22T02:38:41.000Z",
    "dateMiliSeconds": 1632278321000
  },
  {
    "title": "StorybookのPackage Compositionをdisableにしたい",
    "contentSnippet": "はじめにCRA × Chakra UI × Storybook という環境でnpm run storybookして画面を確認してみると、何か見慣れないもの出ていることに気が付きました。現在の開発環境では不要なので消したいと思っていました。 Storybook Composition↑ の赤枠で出ている部分は、Storybook 6.0 から導入されたStorybook Compositionという機能です。簡単に説明すると、ある Storybook の中から別の Storybook を参照することができる機能です。https://storybook.js.org/do...",
    "link": "https://zenn.dev/wattanx/articles/storybook-composition-disable",
    "isoDate": "2021-07-07T13:13:11.000Z",
    "dateMiliSeconds": 1625663591000
  },
  {
    "title": "microCMSブログのNext.js版を作成した",
    "contentSnippet": "はじめにmicroCMS 様が自社ブログのソースコードを github にあげてくださっています。https://github.com/wantainc/microcms-bloghttps://blog.microcms.io/本家 microCMS 様のブログは Nuxt.js×Netlify という構成です。最近は Next.js×Vercel という構成をよく見るため、せっかくなので勉強がてら Next.js×Vercel 構成のブログを頑張って作ってみました。デモサイト →ソースコード →また私と同じ試みをされている方がいらっしゃいます。https://z...",
    "link": "https://zenn.dev/wattanx/articles/d45d5627ffef54",
    "isoDate": "2021-05-05T01:56:12.000Z",
    "dateMiliSeconds": 1620179772000
  },
  {
    "title": "Next.jsでFirebase Authenticationを使う(with Context API)",
    "contentSnippet": "はじめに自分が作ろうとしているサービスにログイン機能が必要である。ログイン機能は Firebase Authentication を使って認証したい。Next.js で Firebase Authentication を使う際に、Context API を使うと初見ではややこしかったのでまとめていく。 環境Next.js v10.1.3Chakra UITypeScript v4.2.3Firebase v9.1.0ステート管理は Context API と Hooks を使う プロジェクト作成Firebase の設定は一からしたいので、TypeScri...",
    "link": "https://zenn.dev/wattanx/articles/1b8d4b7b92a237",
    "isoDate": "2021-04-25T04:26:42.000Z",
    "dateMiliSeconds": 1619324802000
  },
  {
    "title": "(C#)Expression Tree(式木)を使って動的にインスタンスを生成する。",
    "contentSnippet": "Expression TreeとはExpression Tree(式木)とは、式(数式)を木構造で表したもの。例えば、X + Y　は以下のようになります。Expression Treeで表されるコードはコンパイルおよび実行可能であり実行可能なコードの動的な変更や動的クエリの作成が可能になります。 ラムダ式からのExpression Tree作成ラムダ式がExpression型の変数に割り当てられていると、匿名デリゲートではなく、式木としてコンパイルされます。例えば、以下二つのコードは同じ意味になります。Expression<Func<int, int&...",
    "link": "https://zenn.dev/wattanx/articles/be894132aef68a",
    "isoDate": "2021-02-21T13:21:20.000Z",
    "dateMiliSeconds": 1613913680000
  },
  {
    "title": "AWS EC2に立ち上げたWindows ServerにIISをインストールする",
    "contentSnippet": "はじめに前回の投稿ではAWS EC2にWindows Serverを立ち上げて日本語にするところまで完了しました。今後WebAPI(.NET Framework)をデプロイしてAPIを叩きたいのでIISをインストールします。 IISをインストールするサーバーマネージャーを起動する右上の「管理」->「役割と機能の追加」を選択「サーバーの役割」まで次へを押すサーバーの役割Web Server(IIS)を選択し次へを押下ASP.NET 4.7を選択WebServerDirectory Browsing を外すAppl...",
    "link": "https://zenn.dev/wattanx/articles/3a82bdd2058df9",
    "isoDate": "2021-01-28T13:22:51.000Z",
    "dateMiliSeconds": 1611840171000
  },
  {
    "title": "AWS EC2で起動したWindows Serverを日本語設定にする",
    "contentSnippet": "はじめにAWSのEC2でWindows Serverを利用したときにデフォルトの言語が英語なので日本語に設定しなおしました。 EC2インスタンスの起動 AMIの選択以下のWindows Server 2019を選択し、次のステップへ インスタンスタイプの選択無料枠の「t2.micro」を選択し、次のステップへ インスタンスの設定デフォルトのまま次のステップへ ストレージの追加デフォルトのまま次のステップへ タグの追加キー「Name」、値「WebServer」と入力して、次のステップへ セキュリティグループタイプ「RDP」、プロトコル「T...",
    "link": "https://zenn.dev/wattanx/articles/4c4b3750ba8a92",
    "isoDate": "2021-01-06T14:01:52.000Z",
    "dateMiliSeconds": 1609941712000
  },
  {
    "title": "Xamarin.UITestのススメ",
    "contentSnippet": "Xamarin.UITestとはNUnitテストフレームワークを使用してC＃で記述された自動UIテストをiOSおよびAndroidアプリケーションに対して実行できるようにするテストフレームワークです。Xamarin.iOSおよびXamarin.Androidプロジェクトと緊密に統合されていますが、Objective-C / SwiftおよびJavaでネイティブに記述されたiOSおよびAndroidプロジェクトでも使用できます。実際にXamarin.formsで作成したアプリに対して試してみましょう。 用意するものWindows 10 (Home、Proどちらでも)Vi...",
    "link": "https://zenn.dev/wattanx/articles/268a1c32a409ad",
    "isoDate": "2021-01-05T14:01:22.000Z",
    "dateMiliSeconds": 1609855282000
  }
]
